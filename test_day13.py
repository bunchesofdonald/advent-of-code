import unittest

import day13

PUZZLE_INPUT = """6,10
0,14
9,10
0,3
10,4
4,11
6,0
6,12
4,1
0,13
10,12
3,4
3,0
8,4
1,10
2,14
8,10
9,0

fold along y=7
fold along x=5"""


class ParseInputTestCase(unittest.TestCase):
    def test_example(self):
        dots, folds = day13.parse_input(PUZZLE_INPUT.split('\n'))
        assert dots == [
            (6, 10),
            (0, 14),
            (9, 10),
            (0, 3),
            (10, 4),
            (4, 11),
            (6, 0),
            (6, 12),
            (4, 1),
            (0, 13),
            (10, 12),
            (3, 4),
            (3, 0),
            (8, 4),
            (1, 10),
            (2, 14),
            (8, 10),
            (9, 0),
        ]
        assert folds == [
            ('up', 7),
            ('left', 5),
        ]


class DrawDotsTestCase(unittest.TestCase):
    def test_example(self):
        dots, folds = day13.parse_input(PUZZLE_INPUT.split('\n'))
        assert day13.draw_dots(dots) == [
            ['.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.'],
            ['.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '#', '.', '.', '.', '.', '#', '.', '#', '#', '.'],
            ['.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'],
            ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
        ]


class FoldPaperTestCase(unittest.TestCase):
    dots, folds = day13.parse_input(PUZZLE_INPUT.split('\n'))
    paper = day13.draw_dots(dots)
    assert day13.fold_paper(paper, folds) == [
        ['#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#'],
        ['.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.'],
    ]
